preferred=false

// Copy libdigiservices.so to /system/lib/
cc_prebuilt_library_shared {
    name: "libdigiservices",
    shared_libs: [
        "liblog",
        "libnativehelper",
        "libcutils",
        "libtrustfence",
    ],
    multilib: {
        lib32: {
            srcs: ["libdigiservices-arm32.so"],
        },
        lib64: {
            srcs: ["libdigiservices-arm64.so"],
        },
    },
    installable: true,
    prefer: preferred,
}

// We need the 'java_import' and the 'java_library' because only the
// 'java_import' does not work when the library is a boot jar.
// Build digiservices.jar from the static library
java_import {
    name: "staticdigiservices",
    jars: [
        "digiservices.jar",
    ],
    prefer: preferred,
}

java_library {
    name: "digiservices",
    installable: true,
    required: [
        "services",
        "RXTXcomm",
        "CloudConnectorAndroid",
        "digiservices.xml-prebuilt",
        "libdigiservices",
        "diginativeservice64",
    ],
    static_libs: ["staticdigiservices"],
}

// Copy digiservices.xml to /system/etc/permissions/
prebuilt_etc {
    name: "digiservices.xml-prebuilt",
    src: "digiservices.xml",
    sub_dir: "permissions",
    filename: "digiservices.xml",
}

// Copy libdiginativeservice.so to /system/lib/
cc_prebuilt_library_shared {
    name: "libdiginativeservice",
    shared_libs: [
        "libbinder",
        "libutils",
        "liblog",
        "libsocketcan",
    ],
    required: [
        "libsocketcan",
    ],
    multilib: {
        lib32: {
            srcs: ["libdiginativeservice-arm32.so"],
        },
        lib64: {
            srcs: ["libdiginativeservice-arm64.so"],
        },
    },
    installable: true,
    prefer: preferred,
}

// This should be probably 'cc_prebuilt_binary', but somehow the symlinks are
// not being created in that case, so abuse 'sh_binary' which does the job just
// fine (binary is installed and symlinks created).
sh_binary {
    name: "diginativeservice64",
    required: [
        "libdiginativeservice",
    ],
    src: "diginativeservice64",
    symlinks: [
        "diginativeservice",
    ],
    init_rc: ["diginativeservice.rc"],
}
